@model IEnumerable<ContaCorrente_02.Models.Movimento>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Cliente.NomeCliente)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DataRegisto)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Descricao)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ValorDebito)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ValorCredito)
        </th>

        <th>
            <p>Saldo</p>
        </th>

        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Cliente.NomeCliente)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DataRegisto)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Descricao)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ValorDebito)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ValorCredito)
        </td>
        <td>
            @{
                double saldo = -Convert.ToDouble(item.ValorDebito) + Convert.ToDouble(item.ValorCredito);
            }

            @saldo



            @* *************************************  Código copiado e colado do Appkcc  ****************************************** *@

            @*// =====================  Método para calcular o saldo de cada Cliente  ===================== //
            void CalcularSaldo()
            {
            int tamanho = dataGridView1.Rows.Count;
            int debito = 0;
            int credito = 0;
            int saldoTotal = 0;

            for (int i = 0; i < tamanho; i++)
            {
            // Como alguns dados estarão vazios (credito ou debito) é necessário
            // Colocar o try Catch
            try
            {
            debito = Convert.ToInt32(dataGridView1.Rows[i].Cells[3].Value);
            }
            catch (Exception)
            {
            debito = 0;
            }

            try
            {
            credito = Convert.ToInt32(dataGridView1.Rows[i].Cells[4].Value);
            }
            catch (Exception)
            {
            credito = 0;
            }

            saldoTotal = saldoTotal + credito - debito;
            dataGridView1.Rows[i].Cells[6].Value = saldoTotal;
            }

            }
            // =========================== FIM do Método para calcular saldo  =========================== //*@




            @*// ==================  Método para calcular os Totais de DÉBITO e CRÉDITO  ================== //
        void CalcularTotaisDebitoCredito()
        {
        double debito = 0;
        double credito = 0;
        double totalDebitos = 0;
        double totalCreditos = 0;
        int totalLinhas = dataGridView1.Rows.Count;


        for (int i = 0; i < totalLinhas; i++)
        {
        try
        {
        debito = Convert.ToDouble(dataGridView1.Rows[i].Cells[3].Value);
        totalDebitos = totalDebitos + debito;
        }
        catch { }
        try
        {
        credito = Convert.ToDouble(dataGridView1.Rows[i].Cells[4].Value);
        totalCreditos = totalCreditos + credito;
        }
        catch { }
        }*@















        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>

        
    </tr>
}

</table>
